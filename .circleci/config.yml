version: 2.1

# Docker environment.
defaults: &defaults
  shell: /bin/sh -leo pipefail
  working_directory: /go/src/github.com/networkservicemesh/examples
  docker:
    - image: tiswanso/kubectl_kind:latest
  environment:
    GOPATH: /go
    BASH_ENV: /etc/profile

#kind-setup: &kind-setup
#  name: Set up the environment
#  command: |
    

e2e-kind-test: &e2e-kind-test
  steps:
    - setup_remote_docker
    - checkout:
        path: /go/src/github.com/networkservicemesh/examples
    - run:
        name: Start KinD Cluster 1
        command: |
          kind create cluster --name kind1
    - run:
        name: Get KinD cluster info
        working_directory: /go/src/github.com/networkservicemesh/examples/examples/vl3_basic/ci/runner
        command: |
          mkdir kubeconfigs
          kind get kubeconfig --name=kind1 > kubeconfigs/kind1.kubeconfig
    - run:
        name: Build vl3 runner container
        working_directory: /go/src/github.com/networkservicemesh/examples/examples/vl3_basic/ci/runner
        command: |
          docker build --build-arg vl3_branch=${CIRCLE_SHA1:-master} -t vl3-runner:latest -f Dockerfile.runner .

    - run:
        name: Run vl3 test
        command: |
          docker run --name=vl3-run --network=container:kind1-control-plane -t vl3-runner:latest /go/run_vl3.sh

jobs:
  sanity-check:
    resource_class: large
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run:
          name: Install golangci-lint
          command: |
            export GOLANGCI_LINT_VER=1.20.1
            wget https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_LINT_VER}/golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            tar -xvf golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            sudo mv golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64/golangci-lint /usr/local/bin/
      - run:
          name: Lint examples
          command: |
            make lint-all
    environment:
      GO111MODULE: "on"

  build:
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make build-all

  push:
    parameters:
      example:
        type: string
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push << parameters.example >> containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make k8s-<< parameters.example >>-push

  push-all:
    parameters:
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push all containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make push-all

  test:
    parameters:
      example:
        type: string
      description:
        type: string
      nsmbranch:
        type: string
        default: "master"
      nightly:
        type: string
        default: "false"
    machine:
      enabled: true
      docker_layer_caching: true
    working_directory: ~/project/examples
    steps:
      - run:
          name: Update go to 1.13
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.13.linux-amd64.tar.gz
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Install kind
          command: |
            GO111MODULE="on" go get sigs.k8s.io/kind@master
            kind version
      - checkout
      - run:
          name: Patch go.mod
          command: |
            if [ "<< parameters.nightly >>" == "true" ]; then
               ./scripts/update_networkservicemesh.sh master # Update to the master branch
            fi
      - run:
          name: Clone NSM
          command: |
            git clone --single-branch --branch << parameters.nsmbranch >> https://github.com/networkservicemesh/networkservicemesh.git ../networkservicemesh
      - run:
          name: Start kind
          command: |
            make kind-start
            kubectl config use-context kind-nsm
      - run:
          name: Wait for kind to settle
          command: |
            kubectl wait -n kube-system --timeout=150s --for condition=Ready --all pods
      - helm/install-helm-client
      - helm/install-helm-on-cluster:
          enable-cluster-wide-admin-access: true
      - helm/install-helm-chart:
          chart: "../networkservicemesh/deployments/helm/nsm"
          values-to-override: |
            "org=networkservicemesh,tag=<< parameters.nsmbranch >>,admission-webhook.org=networkservicemesh,admission-webhook.tag=<< parameters.nsmbranch >>,spire.enabled=false,insecure=true"
      - run:
          name: Build << parameters.example >> images
          command: |
            make k8s-<< parameters.example >>-save
      - run:
          name: << parameters.description >> deploy
          command: |
            make k8s-<< parameters.example >>-load-images k8s-<< parameters.example >>-deploy
            kubectl wait -n default --timeout=150s --for condition=Ready --all pods
      - run:
          name: << parameters.description >> check
          command: |
            make k8s-<< parameters.example >>-check
      - run:
          name: << parameters.description >> delete
          command: |
            make k8s-<< parameters.example >>-delete
      - run:
          name: Dump cluster state
          when: always
          command: |
            kubectl get nodes --all-namespaces
            kubectl get pods -o wide --all-namespaces
            kubectl describe pods --all-namespaces

  e2e-kind-integration:
    <<: *defaults
    <<: *e2e-kind-test

orbs:
  helm: circleci/helm@0.2.1
workflows:
  version: 2
  test-and-push:
    jobs:
      - e2e-kind-integration
